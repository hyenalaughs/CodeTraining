CREATE TABLE Customers (
    id INT PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE Orders (
    id INT PRIMARY KEY,
    customer_id INT,
    total DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES Customers(id)
);

INSERT INTO Customers (id, name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

INSERT INTO Orders (id, customer_id, total) VALUES
(1, 1, 100),
(2, 1, 200),
(3, 2, 300),
(4, 3, 150),
(5, 3, 250),
(6, 3, 350);


// Подсчет количества заказов по клиентам
SELECT c.id, c.name, COUNT(o.customer_id) as orders_count FROM Customers c
JOIN Orders o ON c.id = o.customer_id
GROUP BY c.id, c.name

// Поиск максимальной зарплаты по отделу.
INSERT INTO Employees (id, name, department, salary) VALUES
(6, 'Frank', 'IT', 80000),
(7, 'Grace', 'HR', 50000);

SELECT department, MAX(salary) FROM Employees
GROUP BY department

// Добавить к заказам категорию по сумме
"low", если сумма < 200
"medium", если сумма 200-300
"high", если > 300

SELECT id, total, 
CASE 
	WHEN total < 200 THEN 'low'
	WHEN total BETWEEN 200 AND 300 THEN 'medium'
	WHEN total > 300 THEN 'high'
END AS category
FROM Orders

// Оконные функции. Пронумеровать заказы каждого клиента по порядку (ROW_NUMBER())

SELECT customer_id, id AS order_id, total, 
ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY total ASC) as order_rank
FROM Orders

// Найти второй по величине доход в каждом отделе.
CREATE TABLE Employees (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10,2)
);

INSERT INTO Employees (id, name, department, salary) VALUES
(1, 'Alice', 'IT', 90000),
(2, 'Bob', 'IT', 80000),
(3, 'Charlie', 'IT', 70000),
(4, 'David', 'HR', 60000),
(5, 'Eve', 'HR', 55000),
(6, 'Frank', 'Sales', 50000),
(7, 'Grace', 'Sales', 45000);

WITH RankedSalaries AS (
	SELECT department, salary,
	RANK() OVER (PARTITION BY department ORDER BY salary DESC) as rnk
	FROM Employees
)

SELECT department, salary FROM RankedSalaries
WHERE rnk = 2

В чем разница между DENSE_RANK(), RANK(), ROW_NUMBER().

// Обновление данных с вставкой новых записей.
Обновить таблицу TargetOrders новыми и изменёнными данными из NewOrders.

CREATE TABLE TargetOrders (
    id INT PRIMARY KEY,
    customer_id INT,
    total DECIMAL(10,2)
);

CREATE TABLE NewOrders (
    id INT PRIMARY KEY,
    customer_id INT,
    total DECIMAL(10,2)
);

INSERT INTO TargetOrders (id, customer_id, total) VALUES
(1, 1, 100),
(2, 2, 150),
(3, 3, 200);

INSERT INTO NewOrders (id, customer_id, total) VALUES
(2, 2, 180), -- обновлённый заказ
(4, 4, 250); -- новый заказ


MERGE INTO TargetOrders AS target
USING NewOrders AS source
ON target.id = source.id
WHEN MATCHED THEN 
	UPDATE SET target.total = source.total
WHEN NOT MATCHED THEN
	INSERT (id, customer_id, total) VALUES (source.id, source.customer_id, source.total);



// Оптимизация индексов для быстрого поиска заказов по дате.

CREATE TABLE OrdersWithDate (
    id INT PRIMARY KEY,
    order_date DATETIME,
    customer_id INT,
    total DECIMAL(10,2)
);

INSERT INTO OrdersWithDate (id, order_date, customer_id, total) VALUES
(1, CONVERT(DATETIME, '2024-01-10', 120), 1, 100),
(2, CONVERT(DATETIME, '2024-01-15', 120), 2, 150),
(3, CONVERT(DATETIME, '2024-01-20', 120), 3, 200);

CREATE INDEX idx_order_date ON OrdersWithDate(order_date)

-- Проверка производительности

SET STATISTICS IO ON;
SET STATISTICS TIME ON;

SELECT * FROM OrdersWithDate WHERE order_date BETWEEN CONVERT(DATETIME, '2024-01-01', 120) 
AND CONVERT(DATETIME, '2024-01-31', 120);


// CTE: Вычисление вложенной структуры (начальники и подчинённые)
Вывести иерархию начальников и подчинённых (рекурсивный CTE).


CREATE TABLE Employees (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    manager_id INT NULL
);

INSERT INTO Employees (id, name, manager_id) VALUES
(1, 'CEO', NULL),
(2, 'Manager 1', 1),
(3, 'Manager 2', 1),
(4, 'Employee A', 2),
(5, 'Employee B', 2),
(6, 'Employee C', 3);



WITH EmployeesHierarchy AS (
SELECT id, name, manager_id, 1 AS level
FROM NewEmployees
WHERE manager_id IS NULL
UNION ALL

SELECT e.id, e.name, e.manager_id, level+1
FROM NewEmployees e
JOIN EmployeesHierarchy h ON h.id = e.manager_id 

)

SELECT * FROM EmployeesHierarchy
ORDER BY level, manager_id


// Анализ средних заказов по месяцам (оконные функции)
Вычислить средний чек по заказам за 3 месяца вперёд и назад (скользящее окно). AVG() и ROWS BETWEEN


SELECT id, order_date, total, 
AVG(total) OVER (
	ORDER BY order_date
	ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING)
as moving_avg
FROM OrdersDates


SELECT FORMAT(sale_date, 'yyyy-mm') as month, sale_date, amount, 
SUM(amount) OVER (ORDER BY sale_date 
ROWS UNBOUNDED PRECEDING) AS running_total
FROM Sales


// Топ-3 самых дорогих заказов по клиентам.

CREATE TABLE OrdersTopThree (
    id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total DECIMAL(10,2)
);

INSERT INTO OrdersTopThree (id, customer_id, order_date, total) VALUES
(1, 101, '2024-01-05', 100),
(2, 101, '2024-01-12', 250),
(3, 101, '2024-02-03', 300),
(4, 101, '2024-02-15', 200),
(5, 102, '2024-03-10', 500),
(6, 102, '2024-03-25', 600),
(7, 102, '2024-04-05', 400),
(8, 103, '2024-04-10', 700),
(9, 103, '2024-04-20', 800),
(10, 103, '2024-05-01', 900);

WITH ranked AS (SELECT customer_id, order_date, total, 
	RANK() OVER (PARTITION BY customer_id ORDER BY total DESC) AS rank
FROM OrdersTopThree)

SELECT * FROM ranked WHERE rank <= 3;






// Средняя сумма заказа за последние 3 заказа.

SELECT customer_id, order_date, total,
CAST(ROUND(AVG(total) OVER (ORDER BY order_date
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) AS DECIMAL(10,2)) AS average_total
FROM OrdersTopThree

// Определение разницы между текущей и предыдущей продажей
Добавьте колонку, показывающую разницу между текущей и предыдущей продажей.

SELECT id, sale_date, amount, 
amount - LAG(amount) OVER (ORDER BY sale_date) AS difference 
FROM Sales

// Процент от общего оборота 

SELECT id, sale_date, amount,
CAST(ROUND(amount * 100.00/SUM(amount) OVER (),2) AS DECIMAL(10,2)) AS percentage
FROM Sales